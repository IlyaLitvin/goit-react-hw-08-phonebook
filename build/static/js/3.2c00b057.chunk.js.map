{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ErrorNotification/ErrorNotification.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","views/ContactsView.module.css","redux/contacts/contactsOperations.js","components/ErrorNotification/ErrorNotification.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","views/ContactsView.js"],"names":["module","exports","Axios","defaults","baseURL","addContact","name","number","dispatch","listActions","addContactRequest","post","then","response","addContactSuccess","data","catch","error","addContactError","fetchContact","getState","fetchContactRequest","get","fetchContactSuccess","fetchContactError","removeContact","id","removeContactRequest","delete","removeContactSuccess","removeContactError","ErrNot","contactAdded","CSSTransition","in","timeout","classNames","styles","unmountOnExit","className","container","text","state","contacts","filter","items","contact","toLowerCase","includes","ContactForm","handleChange","target","setState","value","handleSubmit","event","preventDefault","props","list","some","setTimeout","this","action","onSubmit","contactForm","contactFormLabel","required","type","placeholder","onChange","label","contactFormBtn","Component","mapDispatchToProps","contactOperations","connect","selectors","ContactList","TransitionGroup","component","TaskList","map","e","contactListItem","onClick","deleteList","contactListBtn","contactsOperation","selectros","filterRender","listAction","filterContact","appear","htmlFor","ContactsView","isAuthenticated","onFetchContacts","history","replace","title","Filter","contactsOperations","auth","token"],"mappings":"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","file":"static/js/3.2c00b057.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__3iQjK\",\"contactFormLabel\":\"ContactForm_contactFormLabel__3kXFx\",\"contactFormBtn\":\"ContactForm_contactFormBtn__1L9eg\",\"label\":\"ContactForm_label__1GXtS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ErrorNotification_container__3rfI6\",\"text\":\"ErrorNotification_text__2Nj3H\",\"enter\":\"ErrorNotification_enter__15Q5o\",\"enterActive\":\"ErrorNotification_enterActive__cD69z\",\"exit\":\"ErrorNotification_exit__1HamL\",\"exitActive\":\"ErrorNotification_exitActive__3Zxx4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskList\":\"ContactList_TaskList__eUIUc\",\"contactListItem\":\"ContactList_contactListItem__x99wA\",\"contactListBtn\":\"ContactList_contactListBtn__2NrSt\",\"enter\":\"ContactList_enter__ipVbA\",\"enterActive\":\"ContactList_enterActive__3jQLq\",\"exit\":\"ContactList_exit__1io6K\",\"exitActive\":\"ContactList_exitActive__rkoYZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactFormLabel\":\"Filter_contactFormLabel__3SaIR\",\"appear\":\"Filter_appear__3-bDp\",\"appearActive\":\"Filter_appearActive__2TbOd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"ContactsView_appear__1TKO2\",\"appearActive\":\"ContactsView_appearActive__Asz59\",\"title\":\"ContactsView_title__2VF4t\"};","import Axios from \"axios\";\r\nimport listActions from \"./listActions\";\r\n\r\nAxios.defaults.baseURL = \"https://goit-phonebook-api.herokuapp.com\";\r\n\r\nconst addContact = ({ name, number }) => (dispatch) => {\r\n  dispatch(listActions.addContactRequest());\r\n\r\n  Axios.post(\"/contacts\", {\r\n    name,\r\n    number,\r\n  })\r\n    .then((response) => {\r\n      dispatch(listActions.addContactSuccess(response.data));\r\n    })\r\n    .catch((error) => dispatch(listActions.addContactError(error)));\r\n};\r\n\r\nconst fetchContact = () => (dispatch, getState) => {\r\n  dispatch(listActions.fetchContactRequest());\r\n\r\n  Axios.get(\"/contacts\")\r\n    .then((response) => {\r\n      dispatch(listActions.fetchContactSuccess(response.data));\r\n    })\r\n    .catch((error) => dispatch(listActions.fetchContactError(error)));\r\n};\r\n\r\nconst removeContact = (id) => (dispatch) => {\r\n  dispatch(listActions.removeContactRequest());\r\n\r\n  Axios.delete(`/contacts/${id}`)\r\n    .then(() => {\r\n      dispatch(listActions.removeContactSuccess(id));\r\n    })\r\n    .catch((error) => dispatch(listActions.removeContactError(error)));\r\n};\r\n\r\nexport default { addContact, fetchContact, removeContact };\r\n","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport styles from \"./ErrorNotification.module.css\";\r\n\r\nconst ErrNot = ({ contactAdded }) => {\r\n  return (\r\n    <CSSTransition\r\n      in={contactAdded}\r\n      timeout={250}\r\n      classNames={styles}\r\n      unmountOnExit\r\n    >\r\n      <div className={styles.container}>\r\n        <p className={styles.text}>Contact already declared</p>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\nexport default ErrNot;\r\n","const getLoading = (state) => state.contacts.loading;\r\nconst getFilter = (state) => state.contacts.filter;\r\nconst getForm = (state) => state.contacts.items;\r\nconst getContactList = (state) =>\r\n  state.contacts.items.filter((contact) =>\r\n    contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase())\r\n  );\r\n\r\nexport default { getLoading, getFilter, getForm, getContactList };\r\n","import React, { Component } from \"react\";\nimport styles from \"./ContactForm.module.css\";\nimport { connect } from \"react-redux\";\nimport contactOperations from \"../../redux/contacts/contactsOperations\";\nimport ErrNot from \"../ErrorNotification/ErrorNotification\";\nimport selectors from \"../../redux/selectors\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n    contactAdded: false,\n  };\n\n  handleChange = ({ target }) => {\n    this.setState({\n      [target.name]: target.value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const rule = this.props.list.some(\n      (contact) => contact.name === this.state.name\n    );\n    if (rule) {\n      this.setState({ contactAdded: true });\n      setTimeout(() => this.setState({ contactAdded: false }), 2000);\n      return;\n    }\n    this.props.addContact({ ...this.state });\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  render() {\n    const { name, number, contactAdded } = this.state;\n    return (\n      <>\n        <ErrNot contactAdded={contactAdded} />\n        <form\n          action=\"submit\"\n          onSubmit={this.handleSubmit}\n          className={styles.contactForm}\n        >\n          <label className={styles.contactFormLabel}>\n            Name\n            <input\n              required\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              placeholder=\"name\"\n              onChange={this.handleChange}\n              className={styles.label}\n            />\n          </label>\n          <label className={styles.contactFormLabel}>\n            Number\n            <input\n              required\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"number\"\n              value={number}\n              onChange={this.handleChange}\n              className={styles.label}\n            />\n          </label>\n          <input\n            type=\"submit\"\n            value=\"Add contact\"\n            className={styles.contactFormBtn}\n          />\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  list: selectors.getForm(state),\n});\n\nconst mapDispatchToProps = {\n  addContact: contactOperations.addContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./ContactList.module.css\";\nimport { connect } from \"react-redux\";\nimport contactsOperation from \"../../redux/contacts/contactsOperations\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport selectros from \"../../redux/selectors\";\nclass ContactList extends Component {\n  render() {\n    return (\n      <TransitionGroup component=\"ul\" className={styles.TaskList}>\n        {this.props.list.map((e) => {\n          return (\n            <CSSTransition key={e.id} timeout={250} classNames={styles}>\n              <li className={styles.contactListItem}>\n                {e.name} : {e.number}\n                <button\n                  type=\"button\"\n                  onClick={() => this.props.deleteList(e.id)}\n                  className={styles.contactListBtn}\n                >\n                  Удалить\n                </button>\n              </li>\n            </CSSTransition>\n          );\n        })}\n      </TransitionGroup>\n    );\n  }\n}\n\nContactList.propTypes = {\n  deleteList: PropTypes.func.isRequired,\n  list: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  list: selectros.getContactList(state),\n});\n\nconst mapDispatchToProps = {\n  deleteList: contactsOperation.removeContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Filter.module.css\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport listAction from \"../../redux/contacts/listActions.js\";\nimport selectors from \"../../redux/selectors\";\n\nconst FilterName = ({ filterRender, filter }) => (\n  <CSSTransition\n    in={true}\n    appear={true}\n    timeout={500}\n    classNames={styles}\n    unmountOnExit\n  >\n    <div>\n      <label htmlFor=\"name\" className={styles.contactFormLabel}>\n        Find contacts by name\n      </label>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={(e) => filterRender(e.target.value)}\n      />\n    </div>\n  </CSSTransition>\n);\n\nFilterName.propTypes = {\n  filterRender: PropTypes.func.isRequired,\n  filter: PropTypes.string,\n};\n\nconst mapStateToProps = (state) => ({\n  filter: selectors.getFilter(state),\n});\n\nconst mapDispatchToProps = {\n  filterRender: listAction.filterContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterName);\n","import React, { Component } from \"react\";\r\nimport ContactForm from \"../components/ContactForm/ContactForm\";\r\nimport ContactList from \"../components/ContactList/ContactList\";\r\nimport Filter from \"../components/Filter/Filter\";\r\nimport styles from \"./ContactsView.module.css\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsOperations from \"../redux/contacts/contactsOperations\";\r\n\r\nclass ContactsView extends Component {\r\n  componentDidMount() {\r\n    if (!this.props.isAuthenticated) {\r\n      this.props.history.replace(\"/\");\r\n      return;\r\n    }\r\n    this.props.onFetchContacts();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (!this.props.isAuthenticated) {\r\n      this.props.history.replace(\"/\");\r\n    }\r\n    return;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <CSSTransition\r\n          in={true}\r\n          appear={true}\r\n          timeout={500}\r\n          classNames={styles}\r\n          unmountOnExit\r\n        >\r\n          <h1 className={styles.title}>Phonebook</h1>\r\n        </CSSTransition>\r\n        <ContactForm />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        <ContactList />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: state.auth.token,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onFetchContacts: contactsOperations.fetchContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\r\n"],"sourceRoot":""}